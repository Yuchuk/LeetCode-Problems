{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red30\green30\blue30;\red202\green202\blue202;
\red70\green137\blue204;\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red183\green111\blue179;
\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c15686\c15686\c15686;\cssrgb\c83137\c83137\c83137;
\cssrgb\c33725\c61176\c83922;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;
\cssrgb\c70980\c80784\c65882;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Definition for a binary tree node.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * public class TreeNode \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     int val;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     TreeNode left;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     TreeNode right;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     TreeNode() \{\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     TreeNode(int val) \{ this.val = val; \}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     TreeNode(int val, TreeNode left, TreeNode right) \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *         this.val = val;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *         this.left = left;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *         this.right = right;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     \}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 Solution\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 public\cf4 \strokec4  \cf6 \strokec6 int\cf4 \strokec4  \cf7 \strokec7 minDepth\cf4 \strokec4 (\cf6 \strokec6 TreeNode\cf4 \strokec4  \cf8 \strokec8 root\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 if\cf4 \strokec4 (root == \cf5 \strokec5 null\cf4 \strokec4 )\{\cb1 \
\cb3             \cf9 \strokec9 return\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 minuminDepth\cf4 \strokec4 (root, \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3         \cf9 \strokec9 return\cf4 \strokec4  answer;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 private\cf4 \strokec4  \cf6 \strokec6 int\cf4 \strokec4  \cf8 \strokec8 answer\cf4 \strokec4  = \cf8 \strokec8 Integer\cf4 \strokec4 .\cf8 \strokec8 MAX_VALUE\cf4 \strokec4 ;;\cb1 \
\cb3     \cf5 \strokec5 private\cf4 \strokec4  \cf6 \strokec6 void\cf4 \strokec4  \cf7 \strokec7 minuminDepth\cf4 \strokec4 (\cf6 \strokec6 TreeNode\cf4 \strokec4  \cf8 \strokec8 root\cf4 \strokec4 , \cf6 \strokec6 int\cf4 \strokec4  \cf8 \strokec8 depth\cf4 \strokec4 )\{\cb1 \
\cb3         \cf9 \strokec9 if\cf4 \strokec4 (root == \cf5 \strokec5 null\cf4 \strokec4 )\{\cb1 \
\cb3             \cf9 \strokec9 return\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf9 \strokec9 if\cf4 \strokec4 (\cf8 \strokec8 root\cf4 \strokec4 .\cf8 \strokec8 left\cf4 \strokec4  == \cf5 \strokec5 null\cf4 \strokec4  && \cf8 \strokec8 root\cf4 \strokec4 .\cf8 \strokec8 right\cf4 \strokec4  == \cf5 \strokec5 null\cf4 \strokec4 )\{\cb1 \
\cb3             answer = \cf8 \strokec8 Math\cf4 \strokec4 .\cf7 \strokec7 min\cf4 \strokec4 (answer, depth);\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 minuminDepth\cf4 \strokec4 (\cf8 \strokec8 root\cf4 \strokec4 .\cf8 \strokec8 left\cf4 \strokec4 , depth+\cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 minuminDepth\cf4 \strokec4 (\cf8 \strokec8 root\cf4 \strokec4 .\cf8 \strokec8 right\cf4 \strokec4 , depth+\cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}